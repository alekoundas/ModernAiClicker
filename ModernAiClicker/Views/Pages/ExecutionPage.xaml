<Page
    x:Class="ModernAiClicker.Views.Pages.ExecutionPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:behavior="clr-namespace:ModernAiClicker.Behavior"
    xmlns:converters="clr-namespace:ModernAiClicker.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:enum="clr-namespace:Model.Enums;assembly=Model"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:icons="https://github.com/helluvamatt/BootstrapIcons.Wpf/"
    xmlns:local="clr-namespace:ModernAiClicker.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:Model.Models;assembly=Model"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:ModernAiClicker.ViewModels.Pages"
    Title="ExecutionPage"
    d:DataContext="{d:DesignInstance local:ExecutionPage,
    IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">




    <!--  change tect color on hover?  -->
    <Page.Resources>
        <converters:EventParammeterConverter x:Key="EventParammeterConverter" />

        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181" />

        <Style x:Key="_ListBoxItemStyle" TargetType="ListBoxItem">
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border
                            Name="_Border"
                            Margin="3"
                            Padding="2"
                            Background="#303236"
                            BorderBrush="Black"
                            BorderThickness="2"
                            CornerRadius="5"
                            SnapsToDevicePixels="true">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="_Border" Property="Background" Value="#303236" />
                            </Trigger>

                            <DataTrigger Binding="{Binding ExecutionResultEnum}" Value="{x:Static enum:ExecutionResultEnum.FAIL}">
                                <!--<Setter TargetName="_Border" Property="Visibility" Value="Collapsed" />-->
                                <Setter TargetName="_Border" Property="Background" Value="#802426" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding ExecutionResultEnum}" Value="{x:Static enum:ExecutionResultEnum.SUCCESS}">
                                <!--<Setter TargetName="_Border" Property="Visibility" Value="Collapsed" />-->
                                <Setter TargetName="_Border" Property="Background" Value="#1a5b1f" />
                            </DataTrigger>




                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!--  expander style  -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border
                            Width="16"
                            Height="16"
                            Padding="5,5,5,5"
                            Background="Transparent">
                            <Path
                                x:Name="ExpandPath"
                                Data="{StaticResource TreeArrow}"
                                Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
                                Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="ExpandPath" Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
                                <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
                                <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
                                <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>







        <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
            <Setter Property="behavior:ScrollToSelectedTreeviewItemBehavior.IsBroughtIntoViewWhenSelected" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ToggleButton
                                x:Name="Expander"
                                IsChecked="{Binding IsExpanded}"
                                Style="{StaticResource ExpandCollapseToggleStyle}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.TreeViewItemExpandedCommand}">
                                            <i:InvokeCommandAction.CommandParameter>
                                                <MultiBinding Converter="{StaticResource EventParammeterConverter}">
                                                    <Binding ElementName="Expander" />
                                                    <Binding Path="" />
                                                </MultiBinding>
                                            </i:InvokeCommandAction.CommandParameter>
                                        </i:InvokeCommandAction>
                                    </i:EventTrigger>
                                    <!--<i:EventTrigger EventName="Unchecked">
                                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.TreeViewItemExpandedCommand}" />
                                    </i:EventTrigger>-->
                                </i:Interaction.Triggers>
                            </ToggleButton>
                            <Border
                                x:Name="FlowStepBorder"
                                Grid.Column="1"
                                Background="#25272a"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="PART_Header"
                                    HorizontalAlignment="Stretch"
                                    ContentSource="Header"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter
                                x:Name="ItemsHost"
                                Grid.Row="1"
                                Grid.Column="1" />

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="FlowStepBorder" Property="Background" Value="#303236" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                            </MultiTrigger>
                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.IS_NEW}">
                                <Setter TargetName="FlowStepBorder" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding IsExpanded}" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="ItemsHost" Property="Width" Value="50" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="CornerRadius" Value="2" />
                </Style>
            </Style.Resources>
        </Style>


    </Page.Resources>







    <Grid VerticalAlignment="Top">

        <!--  Grid Definition  -->
        <Grid.Resources>

            <converters:EventParammeterConverter x:Key="EventParammeterConverter" />
            <converters:TreeviewOrdering x:Key="TreeviewOrdering" />
            <behavior:ScrollToSelectedListBoxItemBehavior x:Key="ListBoxOrdering" />

            <!--  FlowStepTypesEnum  -->
            <ObjectDataProvider
                x:Key="FlowStepTypesEnum"
                MethodName="GetValues"
                ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enum:FlowStepTypesEnum" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <!--  ExecutionResultEnum  -->
            <ObjectDataProvider
                x:Key="ExecutionResultEnum"
                MethodName="GetValues"
                ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enum:ExecutionResultEnum" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="0.6*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.6*" />
            <RowDefinition Height="0.1*" MinHeight="100" />
            <RowDefinition Height="3*" />
            <RowDefinition Height="0.25*" />
            <RowDefinition Height="0.35*" />
            <RowDefinition Height="0.6*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>




        <!--  Flows Dropdown  -->
        <ComboBox
            Name="ProcessList"
            Margin="0,0,0,20"
            DisplayMemberPath="Id"
            ItemsSource="{Binding ViewModel.ComboBoxFlows}"
            SelectedItem="{Binding ViewModel.ComboBoxSelectedFlow}">

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding ViewModel.ComboBoxSelectionChangedFlowCommand}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ComboBox>

        <!--  Flow  -->
        <Border
            Grid.Row="1"
            Margin="0,0,20,0"
            Padding="10,20,0,0"
            Background="#272727"
            BorderBrush="#C4C4C4"
            BorderThickness="2"
            CornerRadius="10">
            <Border.Effect>
                <DropShadowEffect Opacity="1" ShadowDepth="5" />
            </Border.Effect>
            <ScrollViewer>

                <Grid VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="0.6*" />
                        <ColumnDefinition Width="0.6*" />
                        <ColumnDefinition Width="0.1*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*" />
                        <RowDefinition Height="1*" />
                    </Grid.RowDefinitions>


                    <!--  Title  -->
                    <!--<TextBlock
                    Grid.Column="3"
                    Grid.ColumnSpan="2"
                    Text="{Binding ViewModel.Flow.Id}" />-->


                    <!--  Status  -->
                    <TextBlock Grid.Column="1" Text="Status:" />
                    <TextBlock Grid.Column="2" Text="{Binding ViewModel.Status}" />

                    <!--  Run for  -->
                    <TextBlock Grid.Column="3" Text="Run for:" />
                    <TextBlock Grid.Column="4" Text="{Binding ViewModel.RunFor}" />

                    <!--  Current step  -->
                    <TextBlock
                        Grid.Row="1"
                        Grid.Column="1"
                        Text="Current step:" />
                    <TextBlock
                        Grid.Row="1"
                        Grid.Column="2"
                        Text="{Binding ViewModel.CurrentStep}" />

                    <!--  Play Button  -->
                    <Button
                        Grid.RowSpan="2"
                        Grid.Column="5"
                        Margin="0,0,0,0"
                        Padding="10"
                        HorizontalAlignment="Center"
                        Content="start">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding ViewModel.ButtonStartClickCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>

                    <!--  Stop Button  -->
                    <Button
                        Grid.RowSpan="2"
                        Grid.Column="6"
                        Margin="0,0,0,0"
                        Padding="10"
                        HorizontalAlignment="Center"
                        Content="stop">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding ViewModel.ButtonStopClickCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>


                </Grid>
            </ScrollViewer>
        </Border>






        <!--  TreeView  -->
        <Border
            Grid.Row="1"
            Grid.RowSpan="4"
            Grid.Column="1"
            Margin="0,0,0,20"
            Background="#272727"
            BorderBrush="#C4C4C4"
            BorderThickness="2"
            CornerRadius="10">
            <Border.Effect>
                <DropShadowEffect Opacity="1" ShadowDepth="5" />
            </Border.Effect>


            <TreeView
                x:Name="FlowsTreeview"
                HorizontalContentAlignment="Stretch"
                AllowDrop="True"
                ItemContainerStyle="{StaticResource TreeViewItemStyle1}"
                ItemsSource="{Binding ViewModel.TreeviewFlows}">
                <TreeView.Resources>

                    <!--  Parent TreeViewItem  -->
                    <HierarchicalDataTemplate DataType="{x:Type models:Flow}" ItemsSource="{Binding FlowSteps, Converter={StaticResource TreeviewOrdering}, ConverterParameter=OrderingNum}">
                        <Border
                            BorderBrush="White"
                            BorderThickness="1"
                            CornerRadius="5">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="0.4*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="0.1*" />
                                </Grid.ColumnDefinitions>


                                <ui:TextBlock
                                    Grid.Column="0"
                                    Padding="10"
                                    VerticalAlignment="Center"
                                    Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}">
                                    <Run Text="{Binding Id}" />
                                    <Run Text="." />
                                </ui:TextBlock>

                                <ui:TextBlock
                                    Grid.Column="2"
                                    Padding="10"
                                    VerticalAlignment="Center"
                                    Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                    Text="{Binding Name}" />

                                <!--  Delete  -->
                                <ui:Button
                                    x:Name="TreeViewItemFlowDeleteButton"
                                    Grid.Row="0"
                                    Grid.RowSpan="2"
                                    Grid.Column="2"
                                    Grid.ColumnSpan="2"
                                    Margin="5"
                                    Padding="5"
                                    HorizontalAlignment="Right"
                                    Background="#323437"
                                    BorderBrush="#3D3F42">
                                    <Button.Resources>
                                        <Style TargetType="Border">
                                            <Setter Property="CornerRadius" Value="5" />
                                        </Style>
                                    </Button.Resources>
                                    <ui:Button.Style>
                                        <Style TargetType="{x:Type ui:Button}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.IsLocked}" Value="true">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ui:Button.Style>
                                    <icons:BootstrapIcon Icon="Trash" />
                                </ui:Button>

                            </Grid>
                        </Border>

                    </HierarchicalDataTemplate>


                    <HierarchicalDataTemplate DataType="{x:Type models:FlowStep}" ItemsSource="{Binding ChildrenFlowSteps, Converter={StaticResource TreeviewOrdering}, ConverterParameter=OrderingNum}">
                        <Border
                            BorderBrush="White"
                            BorderThickness="1"
                            CornerRadius="5">

                            <!--  TreeViewItem ContentPresenter Presentations  -->
                            <ContentPresenter Content="{Binding}">
                                <ContentPresenter.Resources>


                                    <!--  Child TreeViewItem Existing ContentPresenter (Existing Flow Step)  -->
                                    <DataTemplate x:Key="FlowStepExisting">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="0.1*" />
                                                <ColumnDefinition Width="1*" />

                                                <ColumnDefinition Name="columnToHide">
                                                    <ColumnDefinition.Style>
                                                        <Style TargetType="{x:Type ColumnDefinition}">
                                                            <Setter Property="Width" Value="0" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.IsLocked}" Value="false">
                                                                    <Setter Property="Width" Value="0.1*" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ColumnDefinition.Style>
                                                </ColumnDefinition>

                                                <ColumnDefinition Name="columnToHide2">
                                                    <ColumnDefinition.Style>
                                                        <Style TargetType="{x:Type ColumnDefinition}">
                                                            <Setter Property="Width" Value="0" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.IsLocked}" Value="false">
                                                                    <Setter Property="Width" Value="0.1*" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ColumnDefinition.Style>
                                                </ColumnDefinition>

                                                <ColumnDefinition Width="Auto" />



                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*" />
                                                <RowDefinition Height="1*" />
                                            </Grid.RowDefinitions>

                                            <ui:TextBlock
                                                Grid.Row="0"
                                                Grid.RowSpan="2"
                                                Grid.Column="0"
                                                Padding="10"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}">
                                                <Run Text="{Binding Id}" />
                                                <Run Text="." />
                                            </ui:TextBlock>

                                            <ui:TextBlock
                                                Grid.Row="0"
                                                Grid.Column="1"
                                                Padding="10"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                                Text="{Binding Name}" />

                                            <ui:TextBlock
                                                Grid.Row="1"
                                                Grid.Column="1"
                                                Padding="10"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                                Text="{Binding FlowStepType}" />


                                        </Grid>
                                    </DataTemplate>
                                    <!--  Child TreeViewItem Existing ContentPresenter (Existing Flow Step)  -->
                                    <DataTemplate x:Key="FlowStepExistingTemplateSearch">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="0.1*" />
                                                <ColumnDefinition Width="1*" />

                                                <ColumnDefinition Name="columnToHide">
                                                    <ColumnDefinition.Style>
                                                        <Style TargetType="{x:Type ColumnDefinition}">
                                                            <Setter Property="Width" Value="0" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.IsLocked}" Value="false">
                                                                    <Setter Property="Width" Value="0.1*" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ColumnDefinition.Style>
                                                </ColumnDefinition>

                                                <ColumnDefinition Name="columnToHide2">
                                                    <ColumnDefinition.Style>
                                                        <Style TargetType="{x:Type ColumnDefinition}">
                                                            <Setter Property="Width" Value="0" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ExecutionPage}}, Path=ViewModel.IsLocked}" Value="false">
                                                                    <Setter Property="Width" Value="0.1*" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ColumnDefinition.Style>
                                                </ColumnDefinition>

                                                <ColumnDefinition Width="Auto" />



                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*" />
                                                <RowDefinition Height="1*" />

                                            </Grid.RowDefinitions>

                                            <StackPanel Grid.RowSpan="2" Orientation="Horizontal">
                                                <ui:TextBlock
                                                    Padding="10"
                                                    VerticalAlignment="Center"
                                                    Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}">
                                                    <Run Text="{Binding Id}" />
                                                    <Run Text="." />
                                                </ui:TextBlock>
                                                <Image
                                                    MaxWidth="50"
                                                    MaxHeight="50"
                                                    Source="{Binding TemplateImage}" />
                                            </StackPanel>

                                            <ui:TextBlock
                                                Grid.Row="0"
                                                Grid.Column="1"
                                                Padding="10"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                                Text="{Binding Name}" />

                                            <ui:TextBlock
                                                Grid.Row="1"
                                                Grid.Column="1"
                                                Padding="10"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                                Text="{Binding FlowStepType}" />

                                        </Grid>
                                    </DataTemplate>


                                    <!--  Child TreeViewItem New ContentPresenter  (New Flow Step)  -->
                                    <DataTemplate x:Key="FlowStepNew">
                                        <ui:Button
                                            x:Name="TreeViewItemButtonNew"
                                            Padding="10"
                                            HorizontalAlignment="Center"
                                            Content="Add" />
                                    </DataTemplate>



                                    <!--  Child TreeViewItem Success/Fail ContentPresenter  (Success/Fail Flow Step)  -->
                                    <DataTemplate x:Key="FlowStepSuccessFail">
                                        <ui:TextBlock
                                            Grid.Column="1"
                                            Padding="10"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                            Text="{Binding Name}" />
                                    </DataTemplate>


                                </ContentPresenter.Resources>



                                <!--  ContentPresenter Triggers  -->
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <!--  Default  -->
                                        <Setter Property="ContentTemplate" Value="{StaticResource FlowStepExisting}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.IS_NEW}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource FlowStepNew}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.IS_FAILURE}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource FlowStepSuccessFail}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.IS_SUCCESS}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource FlowStepSuccessFail}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.TEMPLATE_SEARCH}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource FlowStepExistingTemplateSearch}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding FlowStepType}" Value="{x:Static enum:FlowStepTypesEnum.TEMPLATE_SEARCH_LOOP}">
                                                <Setter Property="ContentTemplate" Value="{StaticResource FlowStepExistingTemplateSearch}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>

                            </ContentPresenter>
                        </Border>

                    </HierarchicalDataTemplate>




                </TreeView.Resources>
            </TreeView>
        </Border>


        <Border
            Grid.Row="2"
            Margin="0,0,20,0"
            Padding="10,20,0,0"
            Background="#272727"
            BorderBrush="#C4C4C4"
            BorderThickness="2"
            CornerRadius="10">
            <Border.Effect>
                <DropShadowEffect Opacity="1" ShadowDepth="5" />
            </Border.Effect>
            <ScrollViewer>
                <Frame
                    x:Name="UIExecutionDetailFrame"
                    ScrollViewer.CanContentScroll="True"
                    ScrollViewer.VerticalScrollBarVisibility="Visible" />
            </ScrollViewer>
        </Border>

        <!--<ListBox Name="lbTodoList" HorizontalContentAlignment="Stretch" SelectionMode="Extended" SelectionChanged="lbTodoList_SelectionChanged" Grid.Row="2">-->
        <TextBlock
            Grid.Row="3"
            Margin="0,20,0,0"
            Text="Execution history" />


        <StackPanel Grid.Row="4" Orientation="Horizontal">

            <ComboBox
                VerticalAlignment="Top"
                ItemsSource="{Binding ViewModel.ComboBoxExecutionHistories}"
                SelectedItem="{Binding ViewModel.ComboBoxSelectedExecutionHistory}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ViewModel.ComboBoxSelectionChangedExecutionCommand}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Path=Id}" />
                            <TextBlock Text=" - " />
                            <TextBlock Text="{Binding Path=StartedOn}" />
                        </StackPanel>
                    </DataTemplate>

                </ComboBox.ItemTemplate>
            </ComboBox>

            <ui:Button
                MaxHeight="37"
                Margin="10,0,0,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Top">
                <icons:BootstrapIcon Icon="Trash" />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ViewModel.ButtonDeleteClickCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ui:Button>
        </StackPanel>

        <Border
            Grid.Row="5"
            Grid.ColumnSpan="2"
            Background="#272727"
            BorderBrush="#C4C4C4"
            BorderThickness="2">
            <Border.Effect>
                <DropShadowEffect Opacity="1" ShadowDepth="5" />
            </Border.Effect>
            <StackPanel>

                <ListBox
                    Name="ExecutionsListBox"
                    ItemContainerStyle="{DynamicResource _ListBoxItemStyle}"
                    ItemsSource="{Binding ViewModel.ListBoxExecutions}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding ViewModel.ListBoxSelectedItemChangedCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <i:Interaction.Behaviors>
                        <behavior:ScrollToSelectedListBoxItemBehavior />
                    </i:Interaction.Behaviors>

                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>

                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Border BorderThickness="2" CornerRadius="5">
                                <StackPanel>
                                    <TextBlock Text="{Binding Id}" />
                                    <TextBlock Text="{Binding FlowStepId}" />
                                    <TextBlock Text="{Binding FlowId}" />
                                    <Image
                                        MaxWidth="50"
                                        MaxHeight="50"
                                        Source="{Binding FlowStep.TemplateImage}" />
                                    <Image
                                        MaxWidth="50"
                                        MaxHeight="50"
                                        Source="{Binding CurrentMultipleTemplateSearchFlowStep.TemplateImage}" />
                                    <TextBlock Text="{Binding FlowStep.FlowStepType}" />

                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

            </StackPanel>

        </Border>
    </Grid>
</Page>


